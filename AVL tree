#include<bits/stdc++.h>
using namespace std;
struct Node 
{
    int data;
    struct Node *left,*right;
    int height;
};
struct Node* newnode(int key )
{
    struct Node *temp=(struct Node *)malloc(sizeof(struct Node));
    temp->data=key;
    temp->left=temp->right=NULL;
    temp->height=1;
    return temp;
}
void inorder(struct Node *head)
{
    if(head!=NULL)
    {
        inorder(head->left);
        cout<<head->data<<" ";
        inorder(head->right);
    }
}
int height(struct Node *root)
{
    if(root==NULL)
    {
        return 0;
    }
    return root->height;
}
int getbalance(struct Node* root)
{
    return height(root->left)-height(root->right);
}
int max(int a, int b)  
{  
    return (a > b)? a : b;  
} 
struct Node* rightrotation(struct Node *y)
{
    struct Node *x=y->left;
    struct Node *temp=x->right;
     
    x->right=y;
    y->left=temp;
    y->height=1+max(height(y->left),height(y->right));
    x->height=1+max(height(x->left),height(x->right));
    return x;
}
struct Node* leftrotation(struct Node *x)
{
    struct Node *y=x->right;
    struct Node *temp=x->left;
    y->left=x;
    x->right=temp;
    y->height=1+max(height(y->left),height(y->right));
    x->height=1+max(height(x->left),height(x->right));
    return y;
}
struct Node* insert(struct Node *root,int key)
{
    if(root==NULL)
    {
        root=newnode(key);
    }
    if(key<root->data)
    {
        root->left=insert(root->left,key);
    }
    else if(key>root->data)
    {
        root->right=insert(root->right,key);
    }
    else
    {
        return root;
    }
    root->height=1+max(height(root->left),height(root->right));
    int balance=getbalance(root);
    if(balance>1 && key<root->left->data)
    {
        return rightrotation(root);
    }
    if(balance>1 && key>root->left->data)
    {
        root->left=leftrotation(root->left);
        return rightrotation(root);
    }
    if(balance<-1 && key>root->right->data)
    {
        return leftrotation(root);
    }
    if(balance<-1 && key<root->right->data)
    {
        root->right=rightrotation(root->right);
        return leftrotation(root);
    }
    return root;
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
     struct Node *root=NULL;

     int n;
     cin>>n;
     for(int i=0;i<n;i++)
     {
        int k;
        cin>>k;
        root=insert(root, k);
     }
     inorder(root);
    }
}
