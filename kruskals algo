#include<bits/stdc++.h>
using namespace std;
struct edge{
   int src,dec,wt;
    
};
   

struct node{
    long data;
    long rank;
    node* parent;
};
bool comparator(const edge &a,const edge &b)
{
    return a.wt < b.wt;
}
unordered_map<long,node*>mp;
void make_set(long Data)
{
    node* n=(node*)malloc(sizeof(node*));
    n->data=Data;
    n->rank=0;
    n->parent=n;
    mp.insert({Data,n});
    return;
}
node* findset1(node* n)
{
    node* parent=n->parent;
    if(parent->data==n->data)
        return parent;
    n->parent=findset1(parent);
    return n->parent;
}
long findset(long d)
{
    return findset1(mp[d])->data;
}
bool connected(int x,int y){
        if(findset(x) == findset(y)){
            return true;
        }
        else{
            return false;
        }
    }


bool union1(long d1,long d2)
{
    node* n1=findset1(mp[d1]);
    node* n2=findset1(mp[d2]);
    if(n1->data==n2->data)
        return false;
    if(n1->rank>=n2->rank)
    {
         n1->rank=(n1->rank==n2->rank)?n1->rank+1:n1->rank;
         n2->parent=n1;
    }
    else
        n1->parent=n2;
    return true;
}

vector<edge>kruskal(vector<edge>graph,int v)
{
    for(int i=0;i<v;i++)
    {
        make_set(i);
    }
    sort(graph.begin(),graph.end(),comparator);
    vector<edge>spanning;
    spanning.push_back(graph[0]);
    union1(graph[0].src,graph[0].dec);
    for(int i=1;i<graph.size();i++)
    {
        int t1=graph[i].src;
        int t2=graph[i].dec;
        if(!connected(t1,t2))
        {
            union1(graph[i].src,graph[i].dec);
            spanning.push_back(graph[i]);
        }
    }
    return spanning;
}
int main()
{
    vector<edge>graph;
    int e,v;
    cin>>e>>v;
    graph.resize(e);
    for(int i=0;i<e;i++)
    {
        cin>>graph[i].src>>graph[i].dec>>graph[i].wt;
    }
    vector<edge>minispanning=kruskal(graph,v);
    for(edge x : minispanning){
        cout << x.src << " " << x.dec << " " << x.wt << endl;
    }
}
